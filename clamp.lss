
clamp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000077c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000a6  008000a6  00000856  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b1  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081a  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025d  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c4  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f3  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000395  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  8a:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  92:	84 b3       	in	r24, 0x14	; 20
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
  98:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_RS();		//Read status
  9a:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	c2 9a       	sbi	0x18, 2	; 24
  a6:	82 2f       	mov	r24, r18
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  ac:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	92 2f       	mov	r25, r18
  b2:	9a 95       	dec	r25
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCDBusyLoop+0x20>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  b6:	c2 98       	cbi	0x18, 2	; 24
  b8:	92 2f       	mov	r25, r18
  ba:	9a 95       	dec	r25
  bc:	f1 f7       	brne	.-4      	; 0xba <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  be:	c2 9a       	sbi	0x18, 2	; 24
  c0:	92 2f       	mov	r25, r18
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x30>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  c6:	93 b3       	in	r25, 0x13	; 19
  c8:	92 2f       	mov	r25, r18
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <LCDBusyLoop+0x38>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  ce:	c2 98       	cbi	0x18, 2	; 24
  d0:	92 2f       	mov	r25, r18
  d2:	9a 95       	dec	r25
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCDBusyLoop+0x40>
		_delay_us(1);	//tEL
	}while(busy);
  d6:	87 fd       	sbrc	r24, 7
  d8:	e5 cf       	rjmp	.-54     	; 0xa4 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
  da:	c1 98       	cbi	0x18, 1	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	80 6f       	ori	r24, 0xF0	; 240
  e0:	84 bb       	out	0x14, r24	; 20

}
  e2:	08 95       	ret

000000e4 <LCDByte>:


};

void LCDByte(uint8_t c,uint8_t isdata)
{
  e4:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
  e6:	66 23       	and	r22, r22
  e8:	11 f4       	brne	.+4      	; 0xee <LCDByte+0xa>
	CLEAR_RS();
  ea:	c0 98       	cbi	0x18, 0	; 24
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <LCDByte+0xc>
else
	SET_RS();
  ee:	c0 9a       	sbi	0x18, 0	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	82 2f       	mov	r24, r18
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
  f8:	c2 9a       	sbi	0x18, 2	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	93 2f       	mov	r25, r19
  fe:	90 7f       	andi	r25, 0xF0	; 240
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 104:	95 bb       	out	0x15, r25	; 21
 106:	82 2f       	mov	r24, r18
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 10c:	c2 98       	cbi	0x18, 2	; 24
 10e:	82 2f       	mov	r24, r18
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
 114:	c2 9a       	sbi	0x18, 2	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 116:	85 b3       	in	r24, 0x15	; 21
 118:	32 95       	swap	r19
 11a:	30 7f       	andi	r19, 0xF0	; 240
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 120:	85 bb       	out	0x15, r24	; 21
 122:	82 2f       	mov	r24, r18
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 128:	c2 98       	cbi	0x18, 2	; 24
 12a:	2a 95       	dec	r18
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 12e:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>
}
 132:	08 95       	ret

00000134 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	10 c0       	rjmp	.+32     	; 0x15c <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 13c:	85 32       	cpi	r24, 0x25	; 37
 13e:	51 f4       	brne	.+20     	; 0x154 <LCDWriteString+0x20>
	{
		msg++;
 140:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 142:	88 81       	ld	r24, Y
 144:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	28 f0       	brcs	.+10     	; 0x154 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
			LCDData(*msg);
 152:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	}
	msg++;
 15a:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	69 f7       	brne	.-38     	; 0x13c <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	00 d0       	rcall	.+0      	; 0x176 <LCDWriteInt+0xe>
 176:	00 d0       	rcall	.+0      	; 0x178 <LCDWriteInt+0x10>
 178:	0f 92       	push	r0
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	9c 01       	movw	r18, r24
 180:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 182:	fe 01       	movw	r30, r28
 184:	31 96       	adiw	r30, 0x01	; 1
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	df 01       	movw	r26, r30
 18a:	1d 92       	st	X+, r1
 18c:	8a 95       	dec	r24
 18e:	e9 f7       	brne	.-6      	; 0x18a <LCDWriteInt+0x22>
 190:	fe 01       	movw	r30, r28
 192:	35 96       	adiw	r30, 0x05	; 5
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 196:	c9 01       	movw	r24, r18
 198:	6a e0       	ldi	r22, 0x0A	; 10
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 95 03 	call	0x72a	; 0x72a <__divmodhi4>
 1a0:	80 83       	st	Z, r24
	val=val/10;
 1a2:	c9 01       	movw	r24, r18
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 95 03 	call	0x72a	; 0x72a <__divmodhi4>
 1ac:	9b 01       	movw	r18, r22
 1ae:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1b0:	21 15       	cp	r18, r1
 1b2:	31 05       	cpc	r19, r1
 1b4:	81 f7       	brne	.-32     	; 0x196 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1b6:	bf ef       	ldi	r27, 0xFF	; 255
 1b8:	0f 3f       	cpi	r16, 0xFF	; 255
 1ba:	1b 07       	cpc	r17, r27
 1bc:	79 f4       	brne	.+30     	; 0x1dc <LCDWriteInt+0x74>
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 1c2:	ae 01       	movw	r20, r28
 1c4:	4f 5f       	subi	r20, 0xFF	; 255
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <LCDWriteInt+0x66>
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	fa 01       	movw	r30, r20
 1d0:	e2 0f       	add	r30, r18
 1d2:	f3 1f       	adc	r31, r19
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	c1 f3       	breq	.-16     	; 0x1ca <LCDWriteInt+0x62>
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 1dc:	25 e0       	ldi	r18, 0x05	; 5
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	20 1b       	sub	r18, r16
 1e2:	31 0b       	sbc	r19, r17
 1e4:	7e 01       	movw	r14, r28
 1e6:	08 94       	sec
 1e8:	e1 1c       	adc	r14, r1
 1ea:	f1 1c       	adc	r15, r1
 1ec:	e2 0e       	add	r14, r18
 1ee:	f3 1e       	adc	r15, r19
 1f0:	89 01       	movw	r16, r18
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 1f4:	f7 01       	movw	r30, r14
 1f6:	81 91       	ld	r24, Z+
 1f8:	7f 01       	movw	r14, r30
 1fa:	80 5d       	subi	r24, 0xD0	; 208
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	05 30       	cpi	r16, 0x05	; 5
 208:	11 05       	cpc	r17, r1
 20a:	a4 f3       	brlt	.-24     	; 0x1f4 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 224:	84 31       	cpi	r24, 0x14	; 20
 226:	78 f4       	brcc	.+30     	; 0x246 <LCDGotoXY+0x22>

	//16x2 LCD type
	
	switch(y)
 228:	62 30       	cpi	r22, 0x02	; 2
 22a:	31 f0       	breq	.+12     	; 0x238 <LCDGotoXY+0x14>
 22c:	63 30       	cpi	r22, 0x03	; 3
 22e:	31 f0       	breq	.+12     	; 0x23c <LCDGotoXY+0x18>
 230:	61 30       	cpi	r22, 0x01	; 1
 232:	29 f4       	brne	.+10     	; 0x23e <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 234:	80 64       	ori	r24, 0x40	; 64
 236:	03 c0       	rjmp	.+6      	; 0x23e <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 238:	8c 5e       	subi	r24, 0xEC	; 236
 23a:	01 c0       	rjmp	.+2      	; 0x23e <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 23c:	8c 5a       	subi	r24, 0xAC	; 172
			break;
	}

	x|=0b10000000;
  	LCDCmd(x);
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
 246:	08 95       	ret

00000248 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 250:	88 e9       	ldi	r24, 0x98	; 152
 252:	9a e3       	ldi	r25, 0x3A	; 58
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 258:	84 b3       	in	r24, 0x14	; 20
 25a:	80 6f       	ori	r24, 0xF0	; 240
 25c:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 25e:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 260:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 262:	b9 9a       	sbi	0x17, 1	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 264:	85 b3       	in	r24, 0x15	; 21
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 26a:	c2 98       	cbi	0x18, 2	; 24
	CLEAR_RW();
 26c:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
 26e:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	98 2f       	mov	r25, r24
 274:	9a 95       	dec	r25
 276:	f1 f7       	brne	.-4      	; 0x274 <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 278:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 27a:	ad 9a       	sbi	0x15, 5	; 21
 27c:	98 2f       	mov	r25, r24
 27e:	9a 95       	dec	r25
 280:	f1 f7       	brne	.-4      	; 0x27e <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 282:	c2 98       	cbi	0x18, 2	; 24
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 288:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 28c:	81 2f       	mov	r24, r17
 28e:	8c 60       	ori	r24, 0x0C	; 12
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
 2a6:	cd e6       	ldi	r28, 0x6D	; 109
 2a8:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 2aa:	89 91       	ld	r24, Y+
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	c5 3a       	cpi	r28, 0xA5	; 165
 2b6:	d8 07       	cpc	r29, r24
 2b8:	c1 f7       	brne	.-16     	; 0x2aa <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>

}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	08 95       	ret

000002ce <adc_init>:

//Ammeter Functions
// initialize adc
void adc_init()
{
	DDRA = 0x0;
 2ce:	1a ba       	out	0x1a, r1	; 26
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	87 b9       	out	0x07, r24	; 7
  
    // ADC Enable and prescaler of 128
    // 8000000/128 = 62500
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2d4:	87 e8       	ldi	r24, 0x87	; 135
 2d6:	86 b9       	out	0x06, r24	; 6
}
 2d8:	08 95       	ret

000002da <adc_read>:
	
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 2da:	27 b1       	in	r18, 0x07	; 7
 2dc:	87 70       	andi	r24, 0x07	; 7
 2de:	90 70       	andi	r25, 0x00	; 0
 2e0:	28 7f       	andi	r18, 0xF8	; 248
 2e2:	28 2b       	or	r18, r24
 2e4:	27 b9       	out	0x07, r18	; 7
  
    // start single conversion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
 2e6:	36 9a       	sbi	0x06, 6	; 6
  
    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while((ADCSRA&(1<<ADIF))==0);
 2e8:	34 9b       	sbis	0x06, 4	; 6
 2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <adc_read+0xe>
	
	//_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
 2ec:	94 b1       	in	r25, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and Multiply with weight */
 2ee:	85 b1       	in	r24, 0x05	; 5
 2f0:	38 2f       	mov	r19, r24
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	29 0f       	add	r18, r25
 2f6:	31 1d       	adc	r19, r1
	Ain = Ain + AinLow;	
	
	return(Ain);			/* Return digital value*/
    //return (ADCW);
}
 2f8:	c9 01       	movw	r24, r18
 2fa:	08 95       	ret

000002fc <main>:




void main(void)
{
 2fc:	4f 92       	push	r4
 2fe:	5f 92       	push	r5
 300:	6f 92       	push	r6
 302:	7f 92       	push	r7
 304:	8f 92       	push	r8
 306:	9f 92       	push	r9
 308:	af 92       	push	r10
 30a:	bf 92       	push	r11
 30c:	cf 92       	push	r12
 30e:	df 92       	push	r13
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	df 93       	push	r29
 31a:	cf 93       	push	r28
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	c2 55       	subi	r28, 0x52	; 82
 322:	d0 40       	sbci	r29, 0x00	; 0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
int disp1;
int disp2;

 // Input/Output Ports initialization

DDRC = 0x00;
 32e:	14 ba       	out	0x14, r1	; 20
DDRB = 0xff;
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	87 bb       	out	0x17, r24	; 23
DDRD = 0xff;
 334:	81 bb       	out	0x11, r24	; 17

//__LCD Initialization____
        LCDInit(0);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 24 01 	call	0x248	; 0x248 <LCDInit>
		LCDClear();
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>

//Ammeter Functions
// initialize adc
void adc_init()
{
	DDRA = 0x0;
 344:	1a ba       	out	0x1a, r1	; 26
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	87 b9       	out	0x07, r24	; 7
  
    // ADC Enable and prescaler of 128
    // 8000000/128 = 62500
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 34a:	87 e8       	ldi	r24, 0x87	; 135
 34c:	86 b9       	out	0x06, r24	; 6
LCDWriteStringXY(5,0,"%");

LCDWriteStringXY(10,0,"B2:");
LCDGotoXY(13,0);
LCDWriteInt(disp2,2);
LCDWriteStringXY(15,0,"%");
 34e:	4e 01       	movw	r8, r28
 350:	08 94       	sec
 352:	81 1c       	adc	r8, r1
 354:	91 1c       	adc	r9, r1

for(i=0; i<=40; i++)
 356:	93 e5       	ldi	r25, 0x53	; 83
 358:	49 2e       	mov	r4, r25
 35a:	51 2c       	mov	r5, r1
 35c:	4c 0e       	add	r4, r28
 35e:	5d 1e       	adc	r5, r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 360:	82 e3       	ldi	r24, 0x32	; 50
 362:	68 2e       	mov	r6, r24
 364:	71 2c       	mov	r7, r1
adc_init();
       
while(1)
{  

battery_positive = adc_read(1);  //PA1
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 6d 01 	call	0x2da	; 0x2da <adc_read>
 36e:	7c 01       	movw	r14, r24
battery_negative = adc_read(2);   //PA2
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 6d 01 	call	0x2da	; 0x2da <adc_read>
 378:	5c 01       	movw	r10, r24
disp1 = (int)bat1;

bat2 = (float)(battery_negative*0.09765625);
disp2 = (int)bat2;

LCDWriteStringXY(0,0,"B1:");
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
 382:	80 e6       	ldi	r24, 0x60	; 96
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
LCDGotoXY(3,0);
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
LCDWriteInt(disp1,2);
 392:	00 27       	eor	r16, r16
 394:	f7 fc       	sbrc	r15, 7
 396:	00 95       	com	r16
 398:	10 2f       	mov	r17, r16
 39a:	c8 01       	movw	r24, r16
 39c:	b7 01       	movw	r22, r14
 39e:	0e 94 a6 02 	call	0x54c	; 0x54c <__floatsisf>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	48 ec       	ldi	r20, 0xC8	; 200
 3a8:	5d e3       	ldi	r21, 0x3D	; 61
 3aa:	0e 94 0a 03 	call	0x614	; 0x614 <__mulsf3>
 3ae:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixsfsi>
 3b2:	dc 01       	movw	r26, r24
 3b4:	cb 01       	movw	r24, r22
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
LCDWriteStringXY(5,0,"%");
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
 3c6:	84 e6       	ldi	r24, 0x64	; 100
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>

LCDWriteStringXY(10,0,"B2:");
 3ce:	8a e0       	ldi	r24, 0x0A	; 10
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
 3d6:	86 e6       	ldi	r24, 0x66	; 102
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
LCDGotoXY(13,0);
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
LCDWriteInt(disp2,2);
 3e6:	cc 24       	eor	r12, r12
 3e8:	b7 fc       	sbrc	r11, 7
 3ea:	c0 94       	com	r12
 3ec:	dc 2c       	mov	r13, r12
 3ee:	c6 01       	movw	r24, r12
 3f0:	b5 01       	movw	r22, r10
 3f2:	0e 94 a6 02 	call	0x54c	; 0x54c <__floatsisf>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	48 ec       	ldi	r20, 0xC8	; 200
 3fc:	5d e3       	ldi	r21, 0x3D	; 61
 3fe:	0e 94 0a 03 	call	0x614	; 0x614 <__mulsf3>
 402:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixsfsi>
 406:	dc 01       	movw	r26, r24
 408:	cb 01       	movw	r24, r22
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
LCDWriteStringXY(15,0,"%");
 412:	8f e0       	ldi	r24, 0x0F	; 15
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
 41a:	84 e6       	ldi	r24, 0x64	; 100
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
 422:	74 01       	movw	r14, r8
 424:	84 01       	movw	r16, r8

for(i=0; i<=40; i++)
           {
          
           adc_int[i] = adc_read(0);      // read adc value  
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 6d 01 	call	0x2da	; 0x2da <adc_read>
 42e:	f8 01       	movw	r30, r16
 430:	81 93       	st	Z+, r24
 432:	91 93       	st	Z+, r25
 434:	8f 01       	movw	r16, r30
LCDWriteStringXY(10,0,"B2:");
LCDGotoXY(13,0);
LCDWriteInt(disp2,2);
LCDWriteStringXY(15,0,"%");

for(i=0; i<=40; i++)
 436:	e4 15       	cp	r30, r4
 438:	f5 05       	cpc	r31, r5
 43a:	a9 f7       	brne	.-22     	; 0x426 <main+0x12a>
           {
          
           adc_int[i] = adc_read(0);      // read adc value  
           }

           max=adc_int[0];
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	3a 81       	ldd	r19, Y+2	; 0x02
 440:	f7 01       	movw	r30, r14
 442:	80 81       	ld	r24, Z
 444:	91 81       	ldd	r25, Z+1	; 0x01
 446:	28 17       	cp	r18, r24
 448:	39 07       	cpc	r19, r25
 44a:	0c f4       	brge	.+2      	; 0x44e <main+0x152>
 44c:	9c 01       	movw	r18, r24
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	e8 0e       	add	r14, r24
 454:	f9 1e       	adc	r15, r25
 for(i=0; i<=40; i++)
 456:	e0 16       	cp	r14, r16
 458:	f1 06       	cpc	r15, r17
 45a:	91 f7       	brne	.-28     	; 0x440 <main+0x144>
           
           }

        adc=max;

        am = (float)(adc*0.005311799738);//  (5*20)/(1.414*13*1024)
 45c:	b9 01       	movw	r22, r18
 45e:	88 27       	eor	r24, r24
 460:	77 fd       	sbrc	r23, 7
 462:	80 95       	com	r24
 464:	98 2f       	mov	r25, r24
 466:	0e 94 a6 02 	call	0x54c	; 0x54c <__floatsisf>
 46a:	2b e9       	ldi	r18, 0x9B	; 155
 46c:	3e e0       	ldi	r19, 0x0E	; 14
 46e:	4e ea       	ldi	r20, 0xAE	; 174
 470:	5b e3       	ldi	r21, 0x3B	; 59
 472:	0e 94 0a 03 	call	0x614	; 0x614 <__mulsf3>
 476:	60 93 a6 00 	sts	0x00A6, r22
 47a:	70 93 a7 00 	sts	0x00A7, r23
 47e:	80 93 a8 00 	sts	0x00A8, r24
 482:	90 93 a9 00 	sts	0x00A9, r25
        adc = (int)am; 
 486:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixsfsi>
 48a:	70 93 ab 00 	sts	0x00AB, r23
 48e:	60 93 aa 00 	sts	0x00AA, r22
		
		//unsigned int s=2.9;
        
		//LCDInit(0);
		//LCDClear();
        LCDGotoXY(0,1);
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
		LCDWriteInt(am*1000,4);
 49a:	60 91 a6 00 	lds	r22, 0x00A6
 49e:	70 91 a7 00 	lds	r23, 0x00A7
 4a2:	80 91 a8 00 	lds	r24, 0x00A8
 4a6:	90 91 a9 00 	lds	r25, 0x00A9
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	4a e7       	ldi	r20, 0x7A	; 122
 4b0:	54 e4       	ldi	r21, 0x44	; 68
 4b2:	0e 94 0a 03 	call	0x614	; 0x614 <__mulsf3>
 4b6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixsfsi>
 4ba:	dc 01       	movw	r26, r24
 4bc:	cb 01       	movw	r24, r22
 4be:	64 e0       	ldi	r22, 0x04	; 4
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
        LCDWriteStringXY(5,1,"mA");
 4c6:	85 e0       	ldi	r24, 0x05	; 5
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
 4ce:	8a e6       	ldi	r24, 0x6A	; 106
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
 4d6:	88 e5       	ldi	r24, 0x58	; 88
 4d8:	9b e1       	ldi	r25, 0x1B	; 27
 4da:	f3 01       	movw	r30, r6
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <main+0x1e0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e2:	d9 f7       	brne	.-10     	; 0x4da <main+0x1de>
 4e4:	40 cf       	rjmp	.-384    	; 0x366 <main+0x6a>

000004e6 <__fixsfsi>:
 4e6:	04 d0       	rcall	.+8      	; 0x4f0 <__fixunssfsi>
 4e8:	68 94       	set
 4ea:	b1 11       	cpse	r27, r1
 4ec:	8d c0       	rjmp	.+282    	; 0x608 <__fp_szero>
 4ee:	08 95       	ret

000004f0 <__fixunssfsi>:
 4f0:	70 d0       	rcall	.+224    	; 0x5d2 <__fp_splitA>
 4f2:	88 f0       	brcs	.+34     	; 0x516 <__fixunssfsi+0x26>
 4f4:	9f 57       	subi	r25, 0x7F	; 127
 4f6:	90 f0       	brcs	.+36     	; 0x51c <__fixunssfsi+0x2c>
 4f8:	b9 2f       	mov	r27, r25
 4fa:	99 27       	eor	r25, r25
 4fc:	b7 51       	subi	r27, 0x17	; 23
 4fe:	a0 f0       	brcs	.+40     	; 0x528 <__fixunssfsi+0x38>
 500:	d1 f0       	breq	.+52     	; 0x536 <__fixunssfsi+0x46>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	1a f0       	brmi	.+6      	; 0x512 <__fixunssfsi+0x22>
 50c:	ba 95       	dec	r27
 50e:	c9 f7       	brne	.-14     	; 0x502 <__fixunssfsi+0x12>
 510:	12 c0       	rjmp	.+36     	; 0x536 <__fixunssfsi+0x46>
 512:	b1 30       	cpi	r27, 0x01	; 1
 514:	81 f0       	breq	.+32     	; 0x536 <__fixunssfsi+0x46>
 516:	77 d0       	rcall	.+238    	; 0x606 <__fp_zero>
 518:	b1 e0       	ldi	r27, 0x01	; 1
 51a:	08 95       	ret
 51c:	74 c0       	rjmp	.+232    	; 0x606 <__fp_zero>
 51e:	67 2f       	mov	r22, r23
 520:	78 2f       	mov	r23, r24
 522:	88 27       	eor	r24, r24
 524:	b8 5f       	subi	r27, 0xF8	; 248
 526:	39 f0       	breq	.+14     	; 0x536 <__fixunssfsi+0x46>
 528:	b9 3f       	cpi	r27, 0xF9	; 249
 52a:	cc f3       	brlt	.-14     	; 0x51e <__fixunssfsi+0x2e>
 52c:	86 95       	lsr	r24
 52e:	77 95       	ror	r23
 530:	67 95       	ror	r22
 532:	b3 95       	inc	r27
 534:	d9 f7       	brne	.-10     	; 0x52c <__fixunssfsi+0x3c>
 536:	3e f4       	brtc	.+14     	; 0x546 <__fixunssfsi+0x56>
 538:	90 95       	com	r25
 53a:	80 95       	com	r24
 53c:	70 95       	com	r23
 53e:	61 95       	neg	r22
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	8f 4f       	sbci	r24, 0xFF	; 255
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	08 95       	ret

00000548 <__floatunsisf>:
 548:	e8 94       	clt
 54a:	09 c0       	rjmp	.+18     	; 0x55e <__floatsisf+0x12>

0000054c <__floatsisf>:
 54c:	97 fb       	bst	r25, 7
 54e:	3e f4       	brtc	.+14     	; 0x55e <__floatsisf+0x12>
 550:	90 95       	com	r25
 552:	80 95       	com	r24
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	99 23       	and	r25, r25
 560:	a9 f0       	breq	.+42     	; 0x58c <__floatsisf+0x40>
 562:	f9 2f       	mov	r31, r25
 564:	96 e9       	ldi	r25, 0x96	; 150
 566:	bb 27       	eor	r27, r27
 568:	93 95       	inc	r25
 56a:	f6 95       	lsr	r31
 56c:	87 95       	ror	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b7 95       	ror	r27
 574:	f1 11       	cpse	r31, r1
 576:	f8 cf       	rjmp	.-16     	; 0x568 <__floatsisf+0x1c>
 578:	fa f4       	brpl	.+62     	; 0x5b8 <__floatsisf+0x6c>
 57a:	bb 0f       	add	r27, r27
 57c:	11 f4       	brne	.+4      	; 0x582 <__floatsisf+0x36>
 57e:	60 ff       	sbrs	r22, 0
 580:	1b c0       	rjmp	.+54     	; 0x5b8 <__floatsisf+0x6c>
 582:	6f 5f       	subi	r22, 0xFF	; 255
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	16 c0       	rjmp	.+44     	; 0x5b8 <__floatsisf+0x6c>
 58c:	88 23       	and	r24, r24
 58e:	11 f0       	breq	.+4      	; 0x594 <__floatsisf+0x48>
 590:	96 e9       	ldi	r25, 0x96	; 150
 592:	11 c0       	rjmp	.+34     	; 0x5b6 <__floatsisf+0x6a>
 594:	77 23       	and	r23, r23
 596:	21 f0       	breq	.+8      	; 0x5a0 <__floatsisf+0x54>
 598:	9e e8       	ldi	r25, 0x8E	; 142
 59a:	87 2f       	mov	r24, r23
 59c:	76 2f       	mov	r23, r22
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <__floatsisf+0x5e>
 5a0:	66 23       	and	r22, r22
 5a2:	71 f0       	breq	.+28     	; 0x5c0 <__floatsisf+0x74>
 5a4:	96 e8       	ldi	r25, 0x86	; 134
 5a6:	86 2f       	mov	r24, r22
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	2a f0       	brmi	.+10     	; 0x5b8 <__floatsisf+0x6c>
 5ae:	9a 95       	dec	r25
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	da f7       	brpl	.-10     	; 0x5ae <__floatsisf+0x62>
 5b8:	88 0f       	add	r24, r24
 5ba:	96 95       	lsr	r25
 5bc:	87 95       	ror	r24
 5be:	97 f9       	bld	r25, 7
 5c0:	08 95       	ret

000005c2 <__fp_split3>:
 5c2:	57 fd       	sbrc	r21, 7
 5c4:	90 58       	subi	r25, 0x80	; 128
 5c6:	44 0f       	add	r20, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	59 f0       	breq	.+22     	; 0x5e2 <__fp_splitA+0x10>
 5cc:	5f 3f       	cpi	r21, 0xFF	; 255
 5ce:	71 f0       	breq	.+28     	; 0x5ec <__fp_splitA+0x1a>
 5d0:	47 95       	ror	r20

000005d2 <__fp_splitA>:
 5d2:	88 0f       	add	r24, r24
 5d4:	97 fb       	bst	r25, 7
 5d6:	99 1f       	adc	r25, r25
 5d8:	61 f0       	breq	.+24     	; 0x5f2 <__fp_splitA+0x20>
 5da:	9f 3f       	cpi	r25, 0xFF	; 255
 5dc:	79 f0       	breq	.+30     	; 0x5fc <__fp_splitA+0x2a>
 5de:	87 95       	ror	r24
 5e0:	08 95       	ret
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	14 06       	cpc	r1, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	f2 cf       	rjmp	.-28     	; 0x5d0 <__fp_split3+0xe>
 5ec:	46 95       	lsr	r20
 5ee:	f1 df       	rcall	.-30     	; 0x5d2 <__fp_splitA>
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <__fp_splitA+0x30>
 5f2:	16 16       	cp	r1, r22
 5f4:	17 06       	cpc	r1, r23
 5f6:	18 06       	cpc	r1, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	f1 cf       	rjmp	.-30     	; 0x5de <__fp_splitA+0xc>
 5fc:	86 95       	lsr	r24
 5fe:	71 05       	cpc	r23, r1
 600:	61 05       	cpc	r22, r1
 602:	08 94       	sec
 604:	08 95       	ret

00000606 <__fp_zero>:
 606:	e8 94       	clt

00000608 <__fp_szero>:
 608:	bb 27       	eor	r27, r27
 60a:	66 27       	eor	r22, r22
 60c:	77 27       	eor	r23, r23
 60e:	cb 01       	movw	r24, r22
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <__mulsf3>:
 614:	0b d0       	rcall	.+22     	; 0x62c <__mulsf3x>
 616:	78 c0       	rjmp	.+240    	; 0x708 <__fp_round>
 618:	69 d0       	rcall	.+210    	; 0x6ec <__fp_pscA>
 61a:	28 f0       	brcs	.+10     	; 0x626 <__mulsf3+0x12>
 61c:	6e d0       	rcall	.+220    	; 0x6fa <__fp_pscB>
 61e:	18 f0       	brcs	.+6      	; 0x626 <__mulsf3+0x12>
 620:	95 23       	and	r25, r21
 622:	09 f0       	breq	.+2      	; 0x626 <__mulsf3+0x12>
 624:	5a c0       	rjmp	.+180    	; 0x6da <__fp_inf>
 626:	5f c0       	rjmp	.+190    	; 0x6e6 <__fp_nan>
 628:	11 24       	eor	r1, r1
 62a:	ee cf       	rjmp	.-36     	; 0x608 <__fp_szero>

0000062c <__mulsf3x>:
 62c:	ca df       	rcall	.-108    	; 0x5c2 <__fp_split3>
 62e:	a0 f3       	brcs	.-24     	; 0x618 <__mulsf3+0x4>

00000630 <__mulsf3_pse>:
 630:	95 9f       	mul	r25, r21
 632:	d1 f3       	breq	.-12     	; 0x628 <__mulsf3+0x14>
 634:	95 0f       	add	r25, r21
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	55 1f       	adc	r21, r21
 63a:	62 9f       	mul	r22, r18
 63c:	f0 01       	movw	r30, r0
 63e:	72 9f       	mul	r23, r18
 640:	bb 27       	eor	r27, r27
 642:	f0 0d       	add	r31, r0
 644:	b1 1d       	adc	r27, r1
 646:	63 9f       	mul	r22, r19
 648:	aa 27       	eor	r26, r26
 64a:	f0 0d       	add	r31, r0
 64c:	b1 1d       	adc	r27, r1
 64e:	aa 1f       	adc	r26, r26
 650:	64 9f       	mul	r22, r20
 652:	66 27       	eor	r22, r22
 654:	b0 0d       	add	r27, r0
 656:	a1 1d       	adc	r26, r1
 658:	66 1f       	adc	r22, r22
 65a:	82 9f       	mul	r24, r18
 65c:	22 27       	eor	r18, r18
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	62 1f       	adc	r22, r18
 664:	73 9f       	mul	r23, r19
 666:	b0 0d       	add	r27, r0
 668:	a1 1d       	adc	r26, r1
 66a:	62 1f       	adc	r22, r18
 66c:	83 9f       	mul	r24, r19
 66e:	a0 0d       	add	r26, r0
 670:	61 1d       	adc	r22, r1
 672:	22 1f       	adc	r18, r18
 674:	74 9f       	mul	r23, r20
 676:	33 27       	eor	r19, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	23 1f       	adc	r18, r19
 67e:	84 9f       	mul	r24, r20
 680:	60 0d       	add	r22, r0
 682:	21 1d       	adc	r18, r1
 684:	82 2f       	mov	r24, r18
 686:	76 2f       	mov	r23, r22
 688:	6a 2f       	mov	r22, r26
 68a:	11 24       	eor	r1, r1
 68c:	9f 57       	subi	r25, 0x7F	; 127
 68e:	50 40       	sbci	r21, 0x00	; 0
 690:	8a f0       	brmi	.+34     	; 0x6b4 <__mulsf3_pse+0x84>
 692:	e1 f0       	breq	.+56     	; 0x6cc <__mulsf3_pse+0x9c>
 694:	88 23       	and	r24, r24
 696:	4a f0       	brmi	.+18     	; 0x6aa <__mulsf3_pse+0x7a>
 698:	ee 0f       	add	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	bb 1f       	adc	r27, r27
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	91 50       	subi	r25, 0x01	; 1
 6a6:	50 40       	sbci	r21, 0x00	; 0
 6a8:	a9 f7       	brne	.-22     	; 0x694 <__mulsf3_pse+0x64>
 6aa:	9e 3f       	cpi	r25, 0xFE	; 254
 6ac:	51 05       	cpc	r21, r1
 6ae:	70 f0       	brcs	.+28     	; 0x6cc <__mulsf3_pse+0x9c>
 6b0:	14 c0       	rjmp	.+40     	; 0x6da <__fp_inf>
 6b2:	aa cf       	rjmp	.-172    	; 0x608 <__fp_szero>
 6b4:	5f 3f       	cpi	r21, 0xFF	; 255
 6b6:	ec f3       	brlt	.-6      	; 0x6b2 <__mulsf3_pse+0x82>
 6b8:	98 3e       	cpi	r25, 0xE8	; 232
 6ba:	dc f3       	brlt	.-10     	; 0x6b2 <__mulsf3_pse+0x82>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	e7 95       	ror	r30
 6c8:	9f 5f       	subi	r25, 0xFF	; 255
 6ca:	c1 f7       	brne	.-16     	; 0x6bc <__mulsf3_pse+0x8c>
 6cc:	fe 2b       	or	r31, r30
 6ce:	88 0f       	add	r24, r24
 6d0:	91 1d       	adc	r25, r1
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__fp_inf>:
 6da:	97 f9       	bld	r25, 7
 6dc:	9f 67       	ori	r25, 0x7F	; 127
 6de:	80 e8       	ldi	r24, 0x80	; 128
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	08 95       	ret

000006e6 <__fp_nan>:
 6e6:	9f ef       	ldi	r25, 0xFF	; 255
 6e8:	80 ec       	ldi	r24, 0xC0	; 192
 6ea:	08 95       	ret

000006ec <__fp_pscA>:
 6ec:	00 24       	eor	r0, r0
 6ee:	0a 94       	dec	r0
 6f0:	16 16       	cp	r1, r22
 6f2:	17 06       	cpc	r1, r23
 6f4:	18 06       	cpc	r1, r24
 6f6:	09 06       	cpc	r0, r25
 6f8:	08 95       	ret

000006fa <__fp_pscB>:
 6fa:	00 24       	eor	r0, r0
 6fc:	0a 94       	dec	r0
 6fe:	12 16       	cp	r1, r18
 700:	13 06       	cpc	r1, r19
 702:	14 06       	cpc	r1, r20
 704:	05 06       	cpc	r0, r21
 706:	08 95       	ret

00000708 <__fp_round>:
 708:	09 2e       	mov	r0, r25
 70a:	03 94       	inc	r0
 70c:	00 0c       	add	r0, r0
 70e:	11 f4       	brne	.+4      	; 0x714 <__fp_round+0xc>
 710:	88 23       	and	r24, r24
 712:	52 f0       	brmi	.+20     	; 0x728 <__fp_round+0x20>
 714:	bb 0f       	add	r27, r27
 716:	40 f4       	brcc	.+16     	; 0x728 <__fp_round+0x20>
 718:	bf 2b       	or	r27, r31
 71a:	11 f4       	brne	.+4      	; 0x720 <__fp_round+0x18>
 71c:	60 ff       	sbrs	r22, 0
 71e:	04 c0       	rjmp	.+8      	; 0x728 <__fp_round+0x20>
 720:	6f 5f       	subi	r22, 0xFF	; 255
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	08 95       	ret

0000072a <__divmodhi4>:
 72a:	97 fb       	bst	r25, 7
 72c:	09 2e       	mov	r0, r25
 72e:	07 26       	eor	r0, r23
 730:	0a d0       	rcall	.+20     	; 0x746 <__divmodhi4_neg1>
 732:	77 fd       	sbrc	r23, 7
 734:	04 d0       	rcall	.+8      	; 0x73e <__divmodhi4_neg2>
 736:	0c d0       	rcall	.+24     	; 0x750 <__udivmodhi4>
 738:	06 d0       	rcall	.+12     	; 0x746 <__divmodhi4_neg1>
 73a:	00 20       	and	r0, r0
 73c:	1a f4       	brpl	.+6      	; 0x744 <__divmodhi4_exit>

0000073e <__divmodhi4_neg2>:
 73e:	70 95       	com	r23
 740:	61 95       	neg	r22
 742:	7f 4f       	sbci	r23, 0xFF	; 255

00000744 <__divmodhi4_exit>:
 744:	08 95       	ret

00000746 <__divmodhi4_neg1>:
 746:	f6 f7       	brtc	.-4      	; 0x744 <__divmodhi4_exit>
 748:	90 95       	com	r25
 74a:	81 95       	neg	r24
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__udivmodhi4>:
 750:	aa 1b       	sub	r26, r26
 752:	bb 1b       	sub	r27, r27
 754:	51 e1       	ldi	r21, 0x11	; 17
 756:	07 c0       	rjmp	.+14     	; 0x766 <__udivmodhi4_ep>

00000758 <__udivmodhi4_loop>:
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	a6 17       	cp	r26, r22
 75e:	b7 07       	cpc	r27, r23
 760:	10 f0       	brcs	.+4      	; 0x766 <__udivmodhi4_ep>
 762:	a6 1b       	sub	r26, r22
 764:	b7 0b       	sbc	r27, r23

00000766 <__udivmodhi4_ep>:
 766:	88 1f       	adc	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	5a 95       	dec	r21
 76c:	a9 f7       	brne	.-22     	; 0x758 <__udivmodhi4_loop>
 76e:	80 95       	com	r24
 770:	90 95       	com	r25
 772:	bc 01       	movw	r22, r24
 774:	cd 01       	movw	r24, r26
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
